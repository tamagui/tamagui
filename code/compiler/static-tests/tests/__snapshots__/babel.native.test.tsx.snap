// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`basic conditional extraction 1`] = `
"const __ReactNativeStyleSheet = require('react-native').StyleSheet;
const _sheet = __ReactNativeStyleSheet.create({
  "0": {
    "flexDirection": "column"
  },
  "1": {
    "backgroundColor": "red"
  },
  "2": {
    "backgroundColor": "blue"
  },
  "3": {
    "flexDirection": "column"
  },
  "4": {
    "backgroundColor": "red"
  },
  "5": {}
});
const __ReactUseMemo = require('react').useMemo;
const __withStableStyle = require('@tamagui/core')._withStableStyle;
const __ReactNativeView = require('react-native').View;
const __ReactNativeText = require('react-native').Text;
import { YStack } from 'tamagui';
let x = true;
export function Test() {
  return <>
          <_ReactNativeViewWrapper expressions={[x]} />
          <_ReactNativeViewWrapper2 expressions={[x]} />
        </>;
}
const _ReactNativeViewWrapper = __withStableStyle(__ReactNativeView, (theme, _expressions) => {
  return __ReactUseMemo(() => {
    return [_sheet["0"], _expressions[0] ? _sheet["1"] : _sheet["2"]];
  }, [..._expressions]);
});
const _ReactNativeViewWrapper2 = __withStableStyle(__ReactNativeView, (theme, _expressions) => {
  return __ReactUseMemo(() => {
    return [_sheet["3"], _expressions[0] ? _sheet["4"] : _sheet["5"]];
  }, [..._expressions]);
});"
`;

exports[`basic extraction 1`] = `
"const __ReactNativeStyleSheet = require('react-native').StyleSheet;
const _sheet = __ReactNativeStyleSheet.create({
  "0": {
    "flexDirection": "column",
    "backgroundColor": "red"
  }
});
const __ReactNativeView = require('react-native').View;
const __ReactNativeText = require('react-native').Text;
import { YStack } from 'tamagui';
export function Test() {
  return <__ReactNativeView style={_sheet["0"]} />;
}"
`;

exports[`do NOT flatten dynamic values with theme access 1`] = `
"const __ReactNativeView = require('react-native').View;
const __ReactNativeText = require('react-native').Text;
import { YStack } from 'tamagui';
export function Test(props) {
  return <YStack bg='$color' height={props.height} />;
}"
`;

exports[`do NOT flatten dynamic values with theme access, dynamic values, and conditional 1`] = `
"const __ReactNativeView = require('react-native').View;
const __ReactNativeText = require('react-native').Text;
import { YStack } from 'tamagui';
export function Test(props) {
  return <YStack bg={props.isLoading ? '$color' : 'red'} height={props.height} />;
}"
`;

exports[`do NOT flatten multiple dynamic values with theme access and conditional 1`] = `
"const __ReactNativeView = require('react-native').View;
const __ReactNativeText = require('react-native').Text;
import { YStack } from 'tamagui';
export function Test(props) {
  return <YStack bg={props.isLoading ? '$color' : 'red'} height={props.height} width={props.width} />;
}"
`;

exports[`flat transform props 1`] = `
"const __ReactNativeStyleSheet = require('react-native').StyleSheet;
const _sheet = __ReactNativeStyleSheet.create({
  "0": {
    "flexDirection": "column",
    "transform": [{
      "translateY": 20
    }, {
      "translateX": 10
    }, {
      "rotate": "10deg"
    }]
  },
  "1": {
    "transform": [{
      "scale": 1
    }]
  },
  "2": {
    "transform": [{
      "scale": 2
    }]
  }
});
const __ReactUseMemo = require('react').useMemo;
const __withStableStyle = require('@tamagui/core')._withStableStyle;
const __ReactNativeView = require('react-native').View;
const __ReactNativeText = require('react-native').Text;
import { YStack } from 'tamagui';
export function Test(isLoading) {
  return <_ReactNativeViewWrapper expressions={[isLoading]} />;
}
const _ReactNativeViewWrapper = __withStableStyle(__ReactNativeView, (theme, _expressions) => {
  return __ReactUseMemo(() => {
    return [_sheet["0"], _expressions[0] ? _sheet["1"] : _sheet["2"]];
  }, [..._expressions]);
});"
`;

exports[`handles style order merge properly 1`] = `
"const __ReactNativeView = require('react-native').View;
const __ReactNativeText = require('react-native').Text;
import { YStack } from 'tamagui';
export function Test(props) {
  return <YStack scale={props.isLoading ? 1 : 2} x={10} {...props} rotate="10deg" />;
}"
`;

exports[`normalize dynamic values with no theme access 1`] = `
"const __ReactNativeView = require('react-native').View;
const __ReactNativeText = require('react-native').Text;
import { YStack } from 'tamagui';
const height = 200;
export function Test(props) {
  return <YStack height={height} width={props.width} />;
}"
`;

exports[`normalize dynamic values with theme access only 1`] = `
"const __ReactNativeStyleSheet = require('react-native').StyleSheet;
const _sheet = __ReactNativeStyleSheet.create({
  "0": {
    "flexDirection": "column"
  }
});
const __ReactUseMemo = require('react').useMemo;
const __withStableStyle = require('@tamagui/core')._withStableStyle;
const __ReactNativeView = require('react-native').View;
const __ReactNativeText = require('react-native').Text;
import { YStack } from 'tamagui';
export function Test(props) {
  return <_ReactNativeViewWrapper />;
}
const _ReactNativeViewWrapper = __withStableStyle(__ReactNativeView, (theme, _expressions) => {
  return __ReactUseMemo(() => {
    return [_sheet["0"], {
      "backgroundColor": theme.color.get()
    }];
  }, [..._expressions]);
});"
`;

exports[`normalize ternaries flips the conditional properly 1`] = `
"const __ReactNativeStyleSheet = require('react-native').StyleSheet;
const _sheet = __ReactNativeStyleSheet.create({
  "0": {
    "marginBottom": 0
  },
  "1": {
    "marginBottom": 12
  }
});
const __ReactNativeView = require('react-native').View;
const __ReactNativeText = require('react-native').Text;
import { Stack } from 'tamagui';
export function Test(props) {
  return <__ReactNativeView style={props === 123 ? _sheet["0"] : _sheet["1"]} />;
}"
`;

exports[`normalize ternaries with the conditional dynamic values 1`] = `
"const __ReactNativeView = require('react-native').View;
const __ReactNativeText = require('react-native').Text;
import { Stack } from 'tamagui';
export function Test(props) {
  return <Stack marginBottom={props !== 123 ? 12 : props.mb} />;
}"
`;

exports[`theme value extraction should work when no theme variables used 1`] = `
"const __ReactNativeStyleSheet = require('react-native').StyleSheet;
const _sheet = __ReactNativeStyleSheet.create({
  "0": {
    "fontFamily": "Inter",
    "letterSpacing": 0,
    "fontSize": 14,
    "lineHeight": 23,
    "color": "red"
  }
});
const __ReactNativeView = require('react-native').View;
const __ReactNativeText = require('react-native').Text;
import { Paragraph } from 'tamagui';
export function Test() {
  return <__ReactNativeText style={_sheet["0"]}>hello world</__ReactNativeText>;
}"
`;

exports[`theme value extraction should work when theme variables used 1`] = `
"const __ReactNativeStyleSheet = require('react-native').StyleSheet;
const _sheet = __ReactNativeStyleSheet.create({
  "0": {
    "fontFamily": "Inter",
    "letterSpacing": 0,
    "fontSize": 14,
    "lineHeight": 23
  }
});
const __ReactUseMemo = require('react').useMemo;
const __withStableStyle = require('@tamagui/core')._withStableStyle;
const __ReactNativeView = require('react-native').View;
const __ReactNativeText = require('react-native').Text;
import { Paragraph } from 'tamagui';
export function Test() {
  return <_ReactNativeTextWrapper>hello world</_ReactNativeTextWrapper>;
}
const _ReactNativeTextWrapper = __withStableStyle(__ReactNativeText, (theme, _expressions) => {
  return __ReactUseMemo(() => {
    return [_sheet["0"], {
      "color": theme.color.get()
    }];
  }, [..._expressions]);
});"
`;
